USE GD2C2023
GO

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'SQLSQUAD')
BEGIN 
	EXEC ('CREATE SCHEMA SQLSQUAD')
END
GO
/* 
 * TABLE: [SQLSQUAD.BI_Alquiler] 
 */

CREATE TABLE SQLSQUAD.BI_Alquiler(
    ALQUILER_TIEMPO_ID            numeric(18, 0)    NOT NULL,
    ALQUILER_COMISION             numeric(18, 2)    NULL,
    ALQUILER_UBICACION_ID         numeric(18, 0)    NOT NULL,
    ALQUILER_RANGO_M2_ID          numeric(18, 0)    NOT NULL,
    ALQUILER_TIPO_INMUEBLE_ID     numeric(18, 0)    NOT NULL,
    ALQUILER_TIPO_OPERACION_ID    numeric(18, 0)    NOT NULL,
    ALQUILER_AMBIENTES_ID         numeric(18, 0)    NOT NULL,
    ALQUILER_RANGO_ETARIO_ID      numeric(18, 0)    NOT NULL,
    ALQUILER_SUCURSAL_CODIGO      numeric(18, 0)    NOT NULL,
    ALQUILER_PAGO_ID              numeric(18, 0)    NOT NULL,	ALQUILER_ESTADO_ALQUILER_ID   numeric(18, 0)    NOT NULL, 
    CONSTRAINT PKALQ PRIMARY KEY NONCLUSTERED (ALQUILER_TIEMPO_ID, ALQUILER_UBICACION_ID, ALQUILER_RANGO_M2_ID, ALQUILER_TIPO_INMUEBLE_ID, ALQUILER_TIPO_OPERACION_ID, ALQUILER_TIPO_MONEDA_ID, ALQUILER_AMBIENTES_ID, ALQUILER_RANGO_ETARIO_ID, ALQUILER_SUCURSAL_CODIGO, ALQUILER_PAGO_ID, ALQUILER_ESTADO_ALQUILER_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Alquiler') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Alquiler >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Alquiler >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Ambientes] 
 */

CREATE TABLE SQLSQUAD.BI_Ambientes(
    AMBIENTES_ID        numeric(18, 0)    IDENTITY(1,1),
    AMBIENTES_NOMBRE    nvarchar(100)     NULL,
    CONSTRAINT PKAMB PRIMARY KEY NONCLUSTERED (AMBIENTES_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Ambientes') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Ambientes >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Ambientes >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Anuncio] 
 */

CREATE TABLE SQLSQUAD.BI_Anuncio(
    ANUNCIO_TIEMPO_ID            numeric(18, 0)    NOT NULL,
    ANUNCIO_DURACION_PROMEDIO    numeric(18, 0)    NULL,
    ANUNCIO_COSTO                numeric(18, 2)    NULL,
    ANUNCIO_AMBIENTES_ID         numeric(18, 0)    NOT NULL,
    ANUNCIO_UBICACION_ID         numeric(18, 0)    NOT NULL,
    ANUNCIO_TIPO_OPERACION_ID    numeric(18, 0)    NOT NULL,
    ANUNCIO_SUCURSAL_CODIGO      numeric(18, 0)    NOT NULL,
    ANUNCIO_TIPO_MONEDA_ID       numeric(18, 0)    NOT NULL,
    ANUNCIO_RANGO_M2_ID          numeric(18, 0)    NOT NULL,
    ANUNCIO_TIPO_INMUEBLE_ID     numeric(18, 0)    NOT NULL,
    ANUNCIO_RANGO_ETARIO_ID      numeric(18, 0)    NOT NULL,
    ANUNCIO_ESTADO_ANUNCIO_ID    numeric(18, 0)    NOT NULL,
    CONSTRAINT PKANU PRIMARY KEY NONCLUSTERED (ANUNCIO_TIEMPO_ID, ANUNCIO_AMBIENTES_ID, ANUNCIO_UBICACION_ID, ANUNCIO_TIPO_OPERACION_ID, ANUNCIO_SUCURSAL_CODIGO, ANUNCIO_TIPO_MONEDA_ID, ANUNCIO_RANGO_M2_ID, ANUNCIO_TIPO_INMUEBLE_ID, ANUNCIO_RANGO_ETARIO_ID, ANUNCIO_ESTADO_ANUNCIO_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Anuncio') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Anuncio >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Anuncio >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Estado_Alquiler] 
 */

CREATE TABLE SQLSQUAD.BI_Estado_Alquiler(
    ESTADO_ALQUILER_ID        numeric(18, 0)    IDENTITY(1,1),
    ESTADO_ALQUILER_NOMBRE    nvarchar(100)     NULL,	CONSTRAINT PKEST_ALQ PRIMARY KEY NONCLUSTERED (ESTADO_ALQUILER_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Estado_Alquiler') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Estado_Alquiler >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Estado_Alquiler >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Estado_Anuncio] 
 */

CREATE TABLE SQLSQUAD.BI_Estado_Anuncio(
    ESTADO_ANUNCIO_ID        numeric(18, 0)    IDENTITY(1,1),
    ESTADO_ANUNCIO_NOMBRE    nvarchar(100)     NULL,
    CONSTRAINT PKEST_ANU PRIMARY KEY NONCLUSTERED (ESTADO_ANUNCIO_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Estado_Anuncio') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Estado_Anuncio >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Estado_Anuncio >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Pago] 
 */

CREATE TABLE SQLSQUAD.BI_Pago(
    PAGO_ID                   numeric(18, 0)    IDENTITY(1,1),
    PAGO_IMPORTE              decimal(12, 2)    NULL,
    PAGO_FECHA_VENCIMIENTO    date              NULL,
    PAGO_FECHA                date              NULL,
    CONSTRAINT PKPAG PRIMARY KEY NONCLUSTERED (PAGO_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Pago') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Pago >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Pago >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Rango_Etario] 
 */

CREATE TABLE SQLSQUAD.BI_Rango_Etario(
    RANGO_ETARIO_ID    numeric(18, 0)    IDENTITY(1,1),
    MENOR_A_25         bit               NULL,
    MAYOR_A_50         bit               NULL,
    ENTRE_35_Y_50      bit               NULL,
    ENTRE_25_Y_35      bit               NULL,
    CONSTRAINT PKRANG_ET PRIMARY KEY NONCLUSTERED (RANGO_ETARIO_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Rango_Etario') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Rango_Etario >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Rango_Etario >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Rango_m2] 
 */

CREATE TABLE SQLSQUAD.BI_Rango_m2(
    RANGO_M2_ID       numeric(18, 0)    IDENTITY(1,1),
    MAYOR_A_100       bit               NULL,
    ENTRE_75_Y_100    bit               NULL,
    ENTRE_55_75       bit               NOT NULL,
    ENTRE_35_Y_55     bit               NULL,
    MENOR_A_35        bit               NULL,
    CONSTRAINT PKRANG_M2 PRIMARY KEY NONCLUSTERED (RANGO_M2_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Rango_m2') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Rango_m2 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Rango_m2 >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Sucursal] 
 */

CREATE TABLE SQLSQUAD.BI_Sucursal(
    SUCURSAL_CODIGO       numeric(18, 0)    NOT NULL,
    SUCURSAL_NOMBRE       nvarchar(100)     NULL,
    SUCURSAL_DIRECCION    nvarchar(100)     NULL,
    SUCURSAL_TELEFONO     nvarchar(100)     NULL,
    CONSTRAINT PKSUCU PRIMARY KEY NONCLUSTERED (SUCURSAL_CODIGO)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Sucursal') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Sucursal >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Sucursal >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Tiempo] 
 */

CREATE TABLE SQLSQUAD.BI_Tiempo(
    TIEMPO_ID              numeric(18, 0)    IDENTITY(1,1),
    TIEMPO_MES             int               NULL,
    TIEMPO_CUATRIMESTRE    int               NULL,
    TIEMPO_AÑO             int               NULL,
    CONSTRAINT PKTIEM PRIMARY KEY NONCLUSTERED (TIEMPO_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Tiempo') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Tiempo >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Tiempo >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Tipo_inmueble] 
 */

CREATE TABLE SQLSQUAD.BI_Tipo_inmueble(
    TIPO_INMUEBLE_ID        numeric(18, 0)    NOT NULL,
    TIPO_INMUEBLE_NOMBRE    nvarchar(100)     NULL,
    CONSTRAINT PKTIP_INM PRIMARY KEY NONCLUSTERED (TIPO_INMUEBLE_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Tipo_inmueble') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Tipo_inmueble >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Tipo_inmueble >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Tipo_moneda] 
 */

CREATE TABLE SQLSQUAD.BI_Tipo_moneda(
    TIPO_MONEDA_ID        numeric(18, 0)    NOT NULL,
    TIPO_MONEDA_NOMBRE    nvarchar(100)     NULL,
    CONSTRAINT PK7TIP_MON PRIMARY KEY NONCLUSTERED (TIPO_MONEDA_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Tipo_moneda') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Tipo_moneda >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Tipo_moneda >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Tipo_operacion] 
 */

CREATE TABLE SQLSQUAD.BI_Tipo_operacion(
    TIPO_OPERACION_ID        numeric(18, 0)    IDENTITY(1,1),
    TIPO_OPERACION_NOMBRE    nvarchar(100)     NULL,
    CONSTRAINT PK7_TIP_OP PRIMARY KEY NONCLUSTERED (TIPO_OPERACION_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Tipo_operacion') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Tipo_operacion >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Tipo_operacion >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Ubicacion] 
 */

CREATE TABLE SQLSQUAD.BI_Ubicacion(
    UBICACION_ID            numeric(18, 0)    IDENTITY(1,1),
    UBICACION_BARRIO        nvarchar(100)     NULL,
    UBICACION_LOCALIDAD     nvarchar(100)     NULL,
    UBICACION_PROVINICIA    nvarchar(100)     NULL,
    CONSTRAINT PK4UBI PRIMARY KEY NONCLUSTERED (UBICACION_ID)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Ubicacion') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Ubicacion >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Ubicacion >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Venta_inmueble] 
 */

CREATE TABLE SQLSQUAD.BI_Venta_inmueble(
    VENTA_TIEMPO_ID               numeric(18, 0)    NOT NULL,
    VENTA_PRECIO				  numeric(18, 2)    NULL,
    VENTA_COMISION				  numeric(18, 2)    NULL,
    VENTA_RANGO_M2_ID			  numeric(18, 0)    NOT NULL,
    VENTA_AMBIENTES_ID            numeric(18, 0)    NOT NULL,
    VENTA_TIPO_OPERACION_ID       numeric(18, 0)    NOT NULL,
    VENTA_TIPO_MONEDA_ID		  numeric(18, 0)    NOT NULL,
    VENTA_TIPO_INMUEBLE_ID        numeric(18, 0)    NOT NULL,
    VENTA_UBICACION_ID			  numeric(18, 0)    NOT NULL,
    VENTA_SUCURSAL_CODIGO         numeric(18, 0)    NOT NULL,
    CONSTRAINT PK10VENT PRIMARY KEY NONCLUSTERED (VENTA_TIEMPO_ID, VENTA_RANGO_M2_ID, VENTA_AMBIENTES_ID, VENTA_TIPO_OPERACION_ID, VENTA_TIPO_MONEDA_ID, VENTA_TIPO_INMUEBLE_ID, VENTA_UBICACION_ID, VENTA_SUCURSAL_CODIGO)
)
go



IF OBJECT_ID('SQLSQUAD.BI_Venta_inmueble') IS NOT NULL
    PRINT '<<< CREATED TABLE SQLSQUAD.BI_Venta_inmueble >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SQLSQUAD.BI_Venta_inmueble >>>'
go

/* 
 * TABLE: [SQLSQUAD.BI_Alquiler] 
 */

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Tiempo10] 
    FOREIGN KEY (ALQUILER_TIEMPO_ID)
    REFERENCES SQLSQUAD.BI_Tiempo(TIEMPO_ID)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Ubicacion11] 
    FOREIGN KEY (ALQUILER_UBICACION_ID)
    REFERENCES SQLSQUAD.BI_Ubicacion(UBICACION_ID)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Rango_m212] 
    FOREIGN KEY (ALQUILER_RANGO_M2_ID)
    REFERENCES SQLSQUAD.BI_Rango_m2(RANGO_M2_ID)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_inmueble13] 
    FOREIGN KEY (ALQUILER_TIPO_INMUEBLE_ID)
    REFERENCES SQLSQUAD.BI_Tipo_inmueble(TIPO_INMUEBLE_ID)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_operacion14] 
    FOREIGN KEY (ALQUILER_TIPO_OPERACION_ID)
    REFERENCES SQLSQUAD.BI_Tipo_operacion(TIPO_OPERACION_ID)
go
ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Ambientes16] 
    FOREIGN KEY (ALQUILER_AMBIENTES_ID)
    REFERENCES SQLSQUAD.BI_Ambientes(AMBIENTES_ID)
go
ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Rango_Etario17] 
    FOREIGN KEY (ALQUILER_RANGO_ETARIO_ID)
    REFERENCES SQLSQUAD.BI_Rango_Etario(RANGO_ETARIO_ID)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Sucursal18] 
    FOREIGN KEY (ALQUILER_SUCURSAL_CODIGO)
    REFERENCES SQLSQUAD.BI_Sucursal(SUCURSAL_CODIGO)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Pago28] 
    FOREIGN KEY (ALQUILER_PAGO_ID)
    REFERENCES SQLSQUAD.BI_Pago(PAGO_ID)
go

ALTER TABLE SQLSQUAD.BI_Alquiler ADD CONSTRAINT [RefSQLSQUAD.BI_Estado_Alquiler39] 
    FOREIGN KEY (ALQUILER_ESTADO_ALQUILER_ID)
    REFERENCES SQLSQUAD.BI_Estado_Alquiler(ESTADO_ALQUILER_ID)
go
/* 
 * TABLE: [SQLSQUAD.BI_Anuncio] 
 */

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Tiempo1] 
    FOREIGN KEY (ANUNCIO_TIEMPO_ID)
    REFERENCES SQLSQUAD.BI_Tiempo(TIEMPO_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Ambientes2] 
    FOREIGN KEY (ANUNCIO_AMBIENTES_ID)
    REFERENCES SQLSQUAD.BI_Ambientes(AMBIENTES_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Ubicacion3] 
    FOREIGN KEY (ANUNCIO_UBICACION_ID)
    REFERENCES SQLSQUAD.BI_Ubicacion(UBICACION_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_operacion4] 
    FOREIGN KEY (ANUNCIO_TIPO_OPERACION_ID)
    REFERENCES SQLSQUAD.BI_Tipo_operacion(TIPO_OPERACION_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Sucursal5] 
    FOREIGN KEY (ANUNCIO_SUCURSAL_CODIGO)
    REFERENCES SQLSQUAD.BI_Sucursal(SUCURSAL_CODIGO)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Rango_Etario6] 
    FOREIGN KEY (ANUNCIO_RANGO_ETARIO_ID)
    REFERENCES SQLSQUAD.BI_Rango_Etario(RANGO_ETARIO_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_moneda7] 
    FOREIGN KEY (ANUNCIO_TIPO_MONEDA_ID)
    REFERENCES SQLSQUAD.BI_Tipo_moneda(TIPO_MONEDA_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Rango_m28] 
    FOREIGN KEY (ANUNCIO_RANGO_M2_ID)
    REFERENCES SQLSQUAD.BI_Rango_m2(RANGO_M2_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_inmueble9] 
    FOREIGN KEY (ANUNCIO_TIPO_INMUEBLE_ID)
    REFERENCES SQLSQUAD.BI_Tipo_inmueble(TIPO_INMUEBLE_ID)
go

ALTER TABLE SQLSQUAD.BI_Anuncio ADD CONSTRAINT [RefSQLSQUAD.BI_Estado_Anuncio30] 
    FOREIGN KEY (ANUNCIO_ESTADO_ANUNCIO_ID)
    REFERENCES SQLSQUAD.BI_Estado_Anuncio(ESTADO_ANUNCIO_ID)
go


/* 
 * TABLE: [SQLSQUAD.BI_Venta_inmueble] 
 */

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Tiempo19] 
    FOREIGN KEY (VENTA_TIEMPO_ID)
    REFERENCES SQLSQUAD.BI_Tiempo(TIEMPO_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Rango_m220] 
    FOREIGN KEY (VENTA_RANGO_M2_ID)
    REFERENCES SQLSQUAD.BI_Rango_m2(RANGO_M2_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Ambientes21] 
    FOREIGN KEY (VENTA_AMBIENTES_ID)
    REFERENCES SQLSQUAD.BI_Ambientes(AMBIENTES_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_operacion22] 
    FOREIGN KEY (VENTA_TIPO_OPERACION_ID)
    REFERENCES SQLSQUAD.BI_Tipo_operacion(TIPO_OPERACION_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_moneda23] 
    FOREIGN KEY (VENTA_TIPO_MONEDA_ID)
    REFERENCES SQLSQUAD.BI_Tipo_moneda(TIPO_MONEDA_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Tipo_inmueble25] 
    FOREIGN KEY (VENTA_TIPO_INMUEBLE_ID)
    REFERENCES SQLSQUAD.BI_Tipo_inmueble(TIPO_INMUEBLE_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Ubicacion26] 
    FOREIGN KEY (VENTA_UBICACION_ID)
    REFERENCES SQLSQUAD.BI_Ubicacion(UBICACION_ID)
go

ALTER TABLE SQLSQUAD.BI_Venta_inmueble ADD CONSTRAINT [RefSQLSQUAD.BI_Sucursal27] 
    FOREIGN KEY (VENTA_SUCURSAL_CODIGO)
    REFERENCES SQLSQUAD.BI_Sucursal(SUCURSAL_CODIGO)
go
-------------------------- FUNCIONES ----------------------------

CREATE FUNCTION SQLSQUAD.SignoMoneda(@moneda nvarchar(100))
RETURNS char(4)
AS
BEGIN
	 RETURN (SELECT CASE WHEN @moneda = 'Moneda Pesos' THEN '$'
						 WHEN @moneda = 'Moneda Dolares' THEN 'USD'
						 END)
END

GO
CREATE FUNCTION SQLSQUAD.noCumplioPago(@fecha_pago datetime, @fecha_vencimiento datetime)
RETURNS int
BEGIN
	 RETURN (SELECT CASE WHEN @fecha_vencimiento > @fecha_pago THEN 1
						 ELSE 0
						 END)
END

GO
CREATE FUNCTION SQLSQUAD.mayorA100(@superficie numeric(18,2))
RETURNS int
BEGIN
     IF @superficie > 100
		RETURN 1
	  
	 RETURN 0
END

GO
CREATE FUNCTION SQLSQUAD.entre75Y100(@superficie numeric(18,2))
RETURNS int
BEGIN
     IF @superficie >= 75 AND @superficie < 100
		RETURN 1
	  
	 RETURN 0
END

GO
CREATE FUNCTION SQLSQUAD.entre55Y75(@superficie numeric(18,2))
RETURNS int
BEGIN
     IF @superficie >= 55 AND @superficie < 75
		RETURN 1
	  
	 RETURN 0
END

GO
CREATE FUNCTION SQLSQUAD.entre35Y55(@superficie numeric(18,2))
RETURNS int
BEGIN
     IF @superficie >= 35 AND @superficie < 55
		RETURN 1
	  
	 RETURN 0
END
GO
CREATE FUNCTION SQLSQUAD.menorA35(@superficie numeric(18,2))
RETURNS int
BEGIN
     IF @superficie < 35
		RETURN 1
	  
	 RETURN 0
END
GO

CREATE FUNCTION SQLSQUAD.calcularEdad(@fechaNacimiento DATE)
RETURNS INT
AS
BEGIN
    DECLARE @edad INT;

    SELECT @edad = DATEDIFF(YEAR, @fechaNacimiento, GETDATE()) - 
                  CASE 
                     WHEN GETDATE() < DATEADD(YEAR, DATEDIFF(YEAR, @fechaNacimiento, GETDATE()), @fechaNacimiento) 
                     THEN 1 
                     ELSE 0 
                  END;

    RETURN @edad;
END

GO
CREATE FUNCTION SQLSQUAD.edadMenorA25(@edad int)
RETURNS int
BEGIN
	  IF @edad < 25
		RETURN 1
	  RETURN 0
END
GO
CREATE FUNCTION SQLSQUAD.edadEntre25Y35(@edad int)
RETURNS int
BEGIN
     IF @edad >= 25 AND @edad < 35
		RETURN 1
	 RETURN 0
END
GO
CREATE FUNCTION SQLSQUAD.edadEntre35Y50(@edad int)
RETURNS int
BEGIN
     IF @edad >= 35 AND @edad < 50
		RETURN 1
	  
	 RETURN 0
END
GO
CREATE FUNCTION SQLSQUAD.edadMayorA50(@edad int)
RETURNS int
BEGIN
     IF @edad >= 50
		RETURN 1
	  
	 RETURN 0
END
GO

CREATE FUNCTION SQLSQUAD.calcular_Rango_m2(@superficie numeric(18,2))
RETURNS int
BEGIN
	 RETURN (SELECT CASE WHEN SQLSQUAD.mayorA100(@superficie)   = 1  THEN 2
						 WHEN SQLSQUAD.entre75Y100(@superficie) = 1  THEN 5
						 WHEN SQLSQUAD.entre55Y75(@superficie)  = 1  THEN 4
						 WHEN SQLSQUAD.entre35Y55(@superficie)  = 1  THEN 3
						 WHEN SQLSQUAD.menorA35(@superficie)    = 1  THEN 1
						 END) 
END
GO
CREATE FUNCTION SQLSQUAD.calcular_Rango_etario(@edad int)
RETURNS int
BEGIN 
	 RETURN (SELECT CASE WHEN SQLSQUAD.edadMayorA50(@edad)    = 1  THEN 1
						 WHEN SQLSQUAD.edadEntre35Y50(@edad)  = 1  THEN 2
						 WHEN SQLSQUAD.edadEntre25Y35(@edad)  = 1  THEN 3
						 WHEN SQLSQUAD.edadMenorA25(@edad)    = 1  THEN 4
						 END) 
END
GO

-------------------------- PROCEDIMIENTOS ----------------------------

CREATE PROCEDURE MigrarDatosBI_Rango_Etario
AS
BEGIN
	 INSERT INTO SQLSQUAD.BI_Rango_Etario(MENOR_A_25, ENTRE_25_Y_35, ENTRE_35_Y_50, MAYOR_A_50)
	 SELECT SQLSQUAD.edadMenorA25(SQLSQUAD.calcularEdad(INQUILINO_FECHA_NAC)), SQLSQUAD.edadEntre25Y35(SQLSQUAD.calcularEdad(INQUILINO_FECHA_NAC)), SQLSQUAD.edadEntre35Y50(SQLSQUAD.calcularEdad(INQUILINO_FECHA_NAC)), SQLSQUAD.edadMayorA50(SQLSQUAD.calcularEdad(INQUILINO_FECHA_NAC))
	 FROM SQLSQUAD.inquilino
	 UNION
	 SELECT SQLSQUAD.edadMenorA25(SQLSQUAD.calcularEdad(AGENTE_FECHA_NAC)), SQLSQUAD.edadEntre25Y35(SQLSQUAD.calcularEdad(AGENTE_FECHA_NAC)), SQLSQUAD.edadEntre35Y50(SQLSQUAD.calcularEdad(AGENTE_FECHA_NAC)), SQLSQUAD.edadMayorA50(SQLSQUAD.calcularEdad(AGENTE_FECHA_NAC))
	 FROM SQLSQUAD.agente
END

GO
CREATE PROCEDURE MigrarDatosBI_Sucursal
AS
BEGIN
	 INSERT INTO SQLSQUAD.BI_Sucursal(SUCURSAL_CODIGO,SUCURSAL_DIRECCION, SUCURSAL_NOMBRE, SUCURSAL_TELEFONO)
	 SELECT SUCURSAL_CODIGO,concat(concat(d.DIRECCION_CALLE, ' '),d.DIRECCION_NUMERO_CALLE), SUCURSAL_NOMBRE, SUCURSAL_TELEFONO
	 FROM SQLSQUAD.sucursal 
	 INNER JOIN SQLSQUAD.direccion d on d.DIRECCION_ID = sucursal.SUCURSAL_DIRECCION_ID 
END
GO
CREATE PROCEDURE MigrarDatosBI_Ubicacion
AS
BEGIN
	 INSERT INTO SQLSQUAD.BI_Ubicacion(UBICACION_BARRIO, UBICACION_LOCALIDAD, UBICACION_PROVINICIA)
	 SELECT b.BARRIO_NOMBRE, l.LOCALIDAD_NOMBRE, p.PROVINCIA_NOMBRE
	 FROM SQLSQUAD.barrio b
	 INNER JOIN SQLSQUAD.localidad l on l.LOCALIDAD_ID = b.BARRIO_LOCALIDAD_ID
	 INNER JOIN SQLSQUAD.provincia p on p.PROVINCIA_ID = l.LOCALIDAD_PROVINCIA_ID
END

GO
CREATE PROCEDURE MigrarDatosBI_Tiempo
AS
BEGIN
    INSERT INTO SQLSQUAD.BI_Tiempo (TIEMPO_MES, TIEMPO_CUATRIMESTRE, TIEMPO_AÑO)
    SELECT
        MONTH(ANUNCIO_FECHA_PUBLICACION) AS TIEMPO_MES,
        DATEPART(QUARTER, ANUNCIO_FECHA_PUBLICACION) AS TIEMPO_CUATRIMESTRE,
        YEAR(ANUNCIO_FECHA_PUBLICACION) AS TIEMPO_AÑO
    FROM SQLSQUAD.anuncio
	UNION
	SELECT
        MONTH(VENTA_FECHA) AS TIEMPO_MES,
        DATEPART(QUARTER, VENTA_FECHA) AS TIEMPO_CUATRIMESTRE,
        YEAR(VENTA_FECHA) AS TIEMPO_AÑO
    FROM SQLSQUAD.venta
END

GO
CREATE PROCEDURE MigrarDatosBI_Tipo_Operacion
AS
BEGIN
	INSERT INTO SQLSQUAD.BI_Tipo_Operacion(TIPO_OPERACION_NOMBRE)
    SELECT TIP_OP.TIPO_OPERACION_NOMBRE
    FROM SQLSQUAD.tipo_operacion TIP_OP
END

GO
CREATE PROCEDURE MigrarDatosBI_Rango_m2
AS
BEGIN
	 INSERT INTO SQLSQUAD.BI_Rango_m2(MAYOR_A_100, ENTRE_75_Y_100, ENTRE_55_75, ENTRE_35_Y_55, MENOR_A_35)
	 SELECT DISTINCT SQLSQUAD.mayorA100(INMUEBLE_SUPERFICIETOTAL), SQLSQUAD.entre75Y100(INMUEBLE_SUPERFICIETOTAL), SQLSQUAD.entre55Y75(INMUEBLE_SUPERFICIETOTAL), SQLSQUAD.entre35Y55(INMUEBLE_SUPERFICIETOTAL), SQLSQUAD.menorA35(INMUEBLE_SUPERFICIETOTAL) FROM SQLSQUAD.inmueble
END

GO
CREATE PROCEDURE MigrarDatosBI_Tipo_Moneda
AS
BEGIN
	INSERT INTO SQLSQUAD.BI_Tipo_Moneda(TIPO_MONEDA_ID, TIPO_MONEDA_NOMBRE)
    SELECT  TIP_MON.MONEDA_ID, TIP_MON.MONEDA_NOMBRE
    FROM SQLSQUAD.moneda TIP_MON
END
GO
CREATE PROCEDURE MigrarDatosBI_Tipo_Inmueble
AS
BEGIN
	INSERT INTO SQLSQUAD.BI_Tipo_Inmueble(TIPO_INMUEBLE_ID, TIPO_INMUEBLE_NOMBRE)
    SELECT TIP_INM.TIPO_INMUEBLE_ID, TIP_INM.TIPO_INMUEBLE_NOMBRE
    FROM SQLSQUAD.tipo_inmueble TIP_INM
END
GO

CREATE PROCEDURE MigrarDatosBI_Ambientes
AS
BEGIN
	INSERT INTO SQLSQUAD.BI_Ambientes(AMBIENTES_NOMBRE)
    SELECT C.CANT_AMBIENTES_NOMBRE
    FROM SQLSQUAD.cant_ambientes C
END
GO

CREATE PROCEDURE MigrarDatosBI_Pago
AS 
BEGIN
	 INSERT INTO SQLSQUAD.BI_Pago(PAGO_IMPORTE, PAGO_FECHA, PAGO_FECHA_VENCIMIENTO)
	 SELECT PAGO_ALQUILER_IMPORTE, PAGO_ALQUILER_FECHA, PAGO_ALQUILER_FECHA_VENCIMIENTO FROM SQLSQUAD.pago_alquiler
	 JOIN SQLSQUAD.alquiler ON PAGO_ALQUILER_ALQUILER_CODIGO = ALQUILER_CODIGO
	 GROUP BY PAGO_ALQUILER_IMPORTE, PAGO_ALQUILER_FECHA, PAGO_ALQUILER_FECHA_VENCIMIENTO
END
GO
CREATE PROCEDURE MigrarDatosBI_Estado_Anuncio
AS 
BEGIN
	 INSERT INTO SQLSQUAD.BI_Estado_Anuncio(ESTADO_ANUNCIO_NOMBRE)
	 SELECT E.ESTADO_ANUNCIO_NOMBRE FROM SQLSQUAD.estado_anuncio E
END

GO
CREATE PROCEDURE MigrarDatosBI_Estado_Alquiler
AS 
BEGIN
	 INSERT INTO SQLSQUAD.BI_Estado_Alquiler(ESTADO_ALQUILER_NOMBRE)
	 SELECT E.ESTADO_ALQUILER_NOMBRE FROM SQLSQUAD.estado_alquiler E
END

GO
CREATE PROCEDURE MigrarDatosBIAnuncio
AS
BEGIN
	INSERT INTO SQLSQUAD.BI_Anuncio(ANUNCIO_TIEMPO_ID, ANUNCIO_AMBIENTES_ID, ANUNCIO_UBICACION_ID, ANUNCIO_TIPO_OPERACION_ID, ANUNCIO_SUCURSAL_CODIGO, ANUNCIO_TIPO_MONEDA_ID, ANUNCIO_RANGO_M2_ID, ANUNCIO_TIPO_INMUEBLE_ID, ANUNCIO_RANGO_ETARIO_ID,ANUNCIO_ESTADO_ANUNCIO_ID, ANUNCIO_DURACION_PROMEDIO, ANUNCIO_COSTO)
	SELECT
		(SELECT TIEMPO_ID 
		from SQLSQUAD.BI_Tiempo
		where TIEMPO_AÑO = year(A.ANUNCIO_FECHA_PUBLICACION) 
		and TIEMPO_CUATRIMESTRE = DATEPART(QUARTER, A.ANUNCIO_FECHA_PUBLICACION)
		and TIEMPO_MES = month(A.ANUNCIO_FECHA_PUBLICACION)),
	I.INMUEBLE_CANT_AMBIENTES_ID,
		(SELECT UBICACION_ID 
		from SQLSQUAD.BI_Ubicacion
		where UBICACION_BARRIO = b.BARRIO_NOMBRE
		and UBICACION_LOCALIDAD = L.LOCALIDAD_NOMBRE
		and UBICACION_PROVINICIA = p.PROVINCIA_NOMBRE),
	A.ANUNCIO_TIPO_OPERACION_ID,
	Ag.AGENTE_SUCURSAL_CODIGO,
	A.ANUNCIO_MONEDA_ID,
	A.ANUNCIO_ESTADO_ANUNCIO_ID,
	SQLSQUAD.calcular_Rango_m2(I.INMUEBLE_SUPERFICIETOTAL),1,
	--I.INMUEBLE_TIPO_INMUEBLE_ID,
	SQLSQUAD.calcular_Rango_etario(SQLSQUAD.calcularEdad(Ag.AGENTE_FECHA_NAC)),
	AVG(DATEDIFF(DAY, A.ANUNCIO_FECHA_PUBLICACION, A.ANUNCIO_FECHA_FINALIZACION)),
	SUM(A.ANUNCIO_COSTO_ANUNCIO)
	from SQLSQUAD.anuncio A
	join SQLSQUAD.inmueble I on A.ANUNCIO_INMUEBLE_CODIGO = I.INMUEBLE_CODIGO
	join SQLSQUAD.agente Ag on A.ANUNCIO_AGENTE_CODIGO = Ag.AGENTE_CODIGO
	join SQLSQUAD.direccion d on I.INMUEBLE_DIRECCION_ID = d.DIRECCION_ID
	join SQLSQUAD.barrio b on d.DIRECCION_BARRIO_ID = b.BARRIO_ID
	join SQLSQUAD.localidad l on b.BARRIO_LOCALIDAD_ID = l.LOCALIDAD_ID
	join SQLSQUAD.provincia p on l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID
	GROUP BY	year(A.ANUNCIO_FECHA_PUBLICACION), 
				DATEPART(QUARTER, A.ANUNCIO_FECHA_PUBLICACION), 
				month(A.ANUNCIO_FECHA_PUBLICACION), 
				i.INMUEBLE_CANT_AMBIENTES_ID,
				b.BARRIO_ID, b.BARRIO_NOMBRE,
				l.LOCALIDAD_ID, l.LOCALIDAD_NOMBRE,
				p.PROVINCIA_NOMBRE, p.PROVINCIA_NOMBRE,
				a.ANUNCIO_TIPO_OPERACION_ID,
				ag.AGENTE_SUCURSAL_CODIGO,
				a.ANUNCIO_MONEDA_ID,
				SQLSQUAD.calcular_Rango_m2(I.INMUEBLE_SUPERFICIETOTAL),
				i.INMUEBLE_TIPO_INMUEBLE_ID ,
				SQLSQUAD.calcular_Rango_etario(SQLSQUAD.calcularEdad(Ag.AGENTE_FECHA_NAC)),
				A.ANUNCIO_ESTADO_ANUNCIO_ID
END
GO

CREATE PROCEDURE MigrarDatosBIVenta
AS
BEGIN
	INSERT INTO SQLSQUAD.BI_Venta_inmueble(VENTA_TIEMPO_ID, VENTA_AMBIENTES_ID, VENTA_UBICACION_ID, VENTA_TIPO_OPERACION_ID, VENTA_SUCURSAL_CODIGO, VENTA_TIPO_MONEDA_ID, VENTA_RANGO_M2_ID, VENTA_TIPO_INMUEBLE_ID)
	SELECT
		(SELECT TIEMPO_ID 
		from SQLSQUAD.BI_Tiempo
		where TIEMPO_AÑO = year(V.VENTA_FECHA) 
		and TIEMPO_CUATRIMESTRE = DATEPART(QUARTER, V.VENTA_FECHA)
		and TIEMPO_MES = month(V.VENTA_FECHA)),
	I.INMUEBLE_CANT_AMBIENTES_ID,
		(SELECT UBICACION_ID 
		from SQLSQUAD.BI_Ubicacion
		where UBICACION_BARRIO = b.BARRIO_NOMBRE
		and UBICACION_LOCALIDAD = L.LOCALIDAD_NOMBRE
		and UBICACION_PROVINICIA = p.PROVINCIA_NOMBRE),
	An.ANUNCIO_TIPO_OPERACION_ID,
	Ag.AGENTE_SUCURSAL_CODIGO,
	v.VENTA_MONEDA_ID,
	SQLSQUAD.calcular_Rango_m2(I.INMUEBLE_SUPERFICIETOTAL),
	I.INMUEBLE_TIPO_INMUEBLE_ID
	from SQLSQUAD.venta v
	JOIN SQLSQUAD.anuncio an on v.VENTA_ANUNCIO_CODIGO = an.ANUNCIO_CODIGO
	join SQLSQUAD.inmueble I on an.ANUNCIO_INMUEBLE_CODIGO = I.INMUEBLE_CODIGO
	join SQLSQUAD.agente Ag on An.ANUNCIO_AGENTE_CODIGO = Ag.AGENTE_CODIGO
	join SQLSQUAD.direccion d on I.INMUEBLE_DIRECCION_ID = d.DIRECCION_ID
	join SQLSQUAD.barrio b on d.DIRECCION_BARRIO_ID = b.BARRIO_ID
	join SQLSQUAD.localidad l on b.BARRIO_LOCALIDAD_ID = l.LOCALIDAD_ID
	join SQLSQUAD.provincia p on l.LOCALIDAD_PROVINCIA_ID = p.PROVINCIA_ID
	GROUP BY	year(V.VENTA_FECHA), 
				DATEPART(QUARTER, V.VENTA_FECHA), 
				month(V.VENTA_FECHA), 
				i.INMUEBLE_CANT_AMBIENTES_ID,
				b.BARRIO_ID, b.BARRIO_NOMBRE,
				l.LOCALIDAD_ID, l.LOCALIDAD_NOMBRE,
				p.PROVINCIA_NOMBRE, p.PROVINCIA_NOMBRE,
				an.ANUNCIO_TIPO_OPERACION_ID,
				ag.AGENTE_SUCURSAL_CODIGO,
				v.VENTA_MONEDA_ID,
				SQLSQUAD.calcular_Rango_m2(I.INMUEBLE_SUPERFICIETOTAL),
				i.INMUEBLE_TIPO_INMUEBLE_ID
END
GO

------------------ TRANSACCION ---------------------------
GO
BEGIN TRANSACTION
				   EXEC MigrarDatosBI_Rango_Etario
				   EXEC MigrarDatosBI_Ambientes
				   EXEC MigrarDatosBI_Estado_Alquiler
				   EXEC MigrarDatosBI_Estado_Anuncio
				   EXEC MigrarDatosBI_Pago
				   EXEC MigrarDatosBI_Rango_m2
				   EXEC MigrarDatosBI_Sucursal
				   EXEC MigrarDatosBI_Tiempo
				   EXEC MigrarDatosBI_Tipo_Inmueble
				   EXEC MigrarDatosBI_Tipo_Moneda
				   EXEC MigrarDatosBI_Tipo_Operacion
				   EXEC MigrarDatosBI_Ubicacion
				   EXEC MigrarDatosBIAnuncio
				   EXEC MigrarDatosBIVenta
COMMIT TRANSACTION
GO

--1. Duración promedio (en días) que se encuentran publicados los anuncios
--según el tipo de operación (alquiler, venta, etc), barrio y ambientes para cada
--cuatrimestre de cada año. Se consideran todos los anuncios que se dieron de alta
--en ese cuatrimestre. La duración se calcula teniendo en cuenta la fecha de alta y
--la fecha de finalización.


CREATE VIEW SQLSQUAD.duracion_promedio
AS
SELECT DISTINCT TIEMPO_AÑO, TIEMPO_CUATRIMESTRE, TIPO_OPERACION_NOMBRE, UBICACION_BARRIO, AMBIENTES_NOMBRE, AVG(ANUNCIO_DURACION_PROMEDIO) FROM SQLSQUAD.BI_Anuncio
JOIN SQLSQUAD.BI_Tiempo ON TIEMPO_ID = ANUNCIO_TIEMPO_ID
JOIN SQLSQUAD.BI_Tipo_Operacion ON TIPO_OPERACION_ID = ANUNCIO_TIPO_OPERACION_ID
JOIN SQLSQUAD.BI_Ubicacion ON UBICACION_ID = ANUNCIO_UBICACION_ID
JOIN SQLSQUAD.BI_Ambientes ON AMBIENTES_ID = ANUNCIO_AMBIENTES_ID
GROUP BY TIEMPO_AÑO, TIEMPO_CUATRIMESTRE, TIPO_OPERACION_NOMBRE, UBICACION_BARRIO, AMBIENTES_NOMBRE

--2. Precio promedio de los anuncios de inmuebles según el tipo de operación
--(alquiler, venta, etc), tipo de inmueble y rango m2 para cada cuatrimestre/año.
--Se consideran todos los anuncios que se dieron de alta en ese cuatrimestre. El
--precio se debe expresar en el tipo de moneda que corresponda, identificando de
--cuál se trata.

CREATE VIEW SQLSQUAD.precio_promedio
AS
SELECT DISTINCT TIEMPO_AÑO, TIEMPO_CUATRIMESTRE, TIPO_OPERACION_NOMBRE, TIPO_INMUEBLE_NOMBRE, MAYOR_A_100, ENTRE_75_Y_100, ENTRE_55_75, ENTRE_35_Y_55, MENOR_A_35 , SQLSQUAD.SignoMoneda(TIPO_MONEDA_NOMBRE) + ' '+ AVG(ANUNCIO_COSTO_), TIPO_MONEDA_NOMBRE FROM SQLSQUAD.BI_Anuncio
JOIN SQLSQUAD.BI_Tipo_Operacion ON TIPO_OPERACION_ID = ANUNCIO_TIPO_OPERACION_ID
JOIN SQLSQUAD.BI_Tipo_Inmueble ON TIPO_INMUEBLE_ID = ANUNCIO_TIPO_INMUEBLE_ID
JOIN SQLSQUAD.BI_Rango_m2 ON RANGO_M2_ID = ANUNCIO_RANGO_M2_ID
JOIN SQLSQUAD.BI_Tiempo ON TIEMPO_ID = ANUNCIO_TIEMPO_ID
JOIN SQLSQUAD.BI_Tipo_moneda ON TIPO_MONEDA_ID = ANUNCIO_TIPO_MONEDA_ID
GROUP BY TIEMPO_AÑO, TIEMPO_CUATRIMESTRE, TIPO_OPERACION_NOMBRE, TIPO_INMUEBLE_NOMBRE, MAYOR_A_100, ENTRE_75_Y_100, ENTRE_55_75, ENTRE_35_Y_55, MENOR_A_35


--3. Los 5 barrios más elegidos para alquilar en función del rango etario de los
--inquilinos para cada cuatrimestre/año. Se calcula en función de los alquileres
--dados de alta en dicho periodo.

CREATE VIEW SQLSQUAD.barrios_mas_elegidos
AS
SELECT TOP 5 TIEMPO_AÑO, TIEMPO_CUATRIMESTRE, UBICACION_BARRIO, MENOR_A_25, MAYOR_A_50, ENTRE_25_Y_35, ENTRE_35_Y_50 FROM SQLSQUAD.BI_Alquiler
JOIN SQLSQUAD.BI_Ubicacion ON UBICACION_ID = ALQUILER_UBICACION_ID
JOIN SQLSQUAD.BI_Tiempo ON TIEMPO_ID = ALQUILER_TIEMPO_ID
JOIN SQLSQUAD.BI_Rango_Etario ON RANGO_ETARIO_ID = ALQUILER_RANGO_ETARIO_ID
GROUP BY TIEMPO_AÑO, TIEMPO_CUATRIMESTRE, UBICACION_BARRIO, MENOR_A_25, MAYOR_A_50, ENTRE_25_Y_35, ENTRE_35_Y_50
ORDER BY COUNT(*) DESC

--4. Porcentaje de incumplimiento de pagos de alquileres en término por cada
--mes/año. Se calcula en función de las fechas de pago y fecha de vencimiento del
--mismo. El porcentaje es en función del total de pagos en dicho periodo.

CREATE VIEW SQLSQUAD.incumplimiento_pagos
AS
SELECT TIEMPO_AÑO, TIEMPO_MES, SUM(SQLSQUAD.noCumplioPago(PAGO_FECHA, PAGO_FECHA_VENCIMIENTO))/COUNT(*)*100 FROM SQLSQUAD.BI_Alquiler
JOIN SQLSQUAD.BI_Pago ON PAGO_ID = ALQUILER_PAGO_ID
JOIN SQLSQUAD.BI_Tiempo ON TIEMPO_ID = ALQUILER_TIEMPO_ID
GROUP BY TIEMPO_AÑO, TIEMPO_MES

--5. Porcentaje promedio de incremento del valor de los alquileres para los
--contratos en curso por mes/año. Se calcula tomando en cuenta el último pago
--con respecto al del mes en curso, únicamente de aquellos alquileres que hayan
--tenido aumento y están activos.

CREATE VIEW SQLSQUAD.incremento
AS
SELECT TIEMPO_AÑO, TIEMPO_MES, AVG(PAGO_IMPORTE*100/
								  (SELECT PAGO_IMPORTE FROM SQLSQUAD.BI_Pago
									JOIN SQLSQUAD.BI_Alquiler ON PAGO_ID = ALQUILER_PAGO_ID
									WHERE TIEMPO_MES = MONTH(GETDATE()) 
									AND TIEMPO_AÑO = YEAR(GETDATE()))) 
FROM SQLSQUAD.BI_Alquiler
JOIN SQLSQUAD.BI_Pago ON PAGO_ID = ALQUILER_PAGO_ID
JOIN SQLSQUAD.BI_Tiempo ON TIEMPO_ID = ALQUILER_TIEMPO_ID
JOIN SQLSQUAD.BI_Estado_Alquiler ON ESTADO_ALQUILER_ID = ALQUILER_ESTADO_ALQUILER_ID
WHERE PAGO_IMPORTE < (SELECT PAGO_IMPORTE FROM SQLSQUAD.BI_Pago
					  JOIN SQLSQUAD.BI_Alquiler ON PAGO_ID = ALQUILER_PAGO_ID
						WHERE TIEMPO_MES = MONTH(GETDATE()) AND TIEMPO_AÑO = YEAR(GETDATE()))
	  AND ESTADO_ALQUILER_NOMBRE = 'Activo'
GROUP BY TIEMPO_AÑO, TIEMPO_MES

--6. Precio promedio de m2 de la venta de inmuebles según el tipo de inmueble y
--la localidad para cada cuatrimestre/año. Se calcula en función de las ventas
--concretadas.

--Agrupar por m2? 
CREATE VIEW SQLSQUAD.precio_prom_m2
AS
SELECT t.TIEMPO_CUATRIMESTRE, t.TIEMPO_AÑO, AVG(v.venta_precio)
FROM SQLSQUAD.BI_Venta_inmueble v
JOIN SQLSQUAD.BI_Tipo_inmueble i on i.TIPO_INMUEBLE_ID = v.VENTA_TIPO_INMUEBLE_ID
JOIN SQLSQUAD.BI_Ubicacion u on u.UBICACION_ID = v.VENTA_UBICACION_ID 
JOIN SQLSQUAD.BI_Tiempo t ON t.TIEMPO_ID = v.VENTA_TIEMPO_ID
GROUP BY t.TIEMPO_CUATRIMESTRE, t.TIEMPO_AÑO
--7. Valor promedio de la comisión según el tipo de operación (alquiler, venta, etc)
--y sucursal para cada cuatrimestre/año. Se calcula en función de los alquileres y
--ventas concretadas dentro del periodo.
CREATE VIEW SQLSQUAD.valor_prom_comision
AS
SELECT AVG(v.VENTA_COMISION), ti.TIPO_OPERACION_NOMBRE,t.TIEMPO_AÑO, t.TIEMPO_CUATRIMESTRE 
FROM SQLSQUAD.BI_Venta_inmueble v
JOIN SQLSQUAD.BI_Sucursal s on s.SUCURSAL_CODIGO = v.VENTA_SUCURSAL_CODIGO
JOIN SQLSQUAD.BI_Tiempo t ON t.TIEMPO_ID = v.VENTA_TIEMPO_ID
JOIN SQLSQUAD.BI_Tipo_operacion ti on v.VENTA_TIPO_OPERACION_ID = ti.TIPO_OPERACION_ID
GROUP BY ti.TIPO_OPERACION_NOMBRE, t.TIEMPO_AÑO, t.TIEMPO_CUATRIMESTRE
UNION ALL
SELECT AVG(a.ALQUILER_COMISION), ti.TIPO_OPERACION_NOMBRE,t.TIEMPO_AÑO, t.TIEMPO_CUATRIMESTRE 
FROM SQLSQUAD.BI_Alquiler a
JOIN SQLSQUAD.BI_Sucursal s on s.SUCURSAL_CODIGO = a.ALQUILER_SUCURSAL_CODIGO
JOIN SQLSQUAD.BI_Tiempo t ON t.TIEMPO_ID = a.ALQUILER_TIEMPO_ID
JOIN SQLSQUAD.BI_Tipo_operacion ti on a.ALQUILER_TIPO_OPERACION_ID = ti.TIPO_OPERACION_ID
GROUP BY ti.TIPO_OPERACION_NOMBRE, t.TIEMPO_AÑO, t.TIEMPO_CUATRIMESTRE

--8. Porcentaje de operaciones concretadas (tanto de alquileres como ventas) por
--cada sucursal, según el rango etario de los empleados por año en función de la
--cantidad de anuncios publicados en ese mismo año.
CREATE VIEW SQLSQUAD.valor_porcentaje_operaciones_concretadas
AS
--chequear
SELECT (SELECT COUNT(*) FROM  SQLSQUAD.BI_Anuncio a WHERE a.ANUNCIO_ESTADO_ANUNCIO_ID = 2)*100/COUNT(*)
FROM SQLSQUAD.BI_Anuncio a
JOIN SQLSQUAD.BI_Sucursal s on s.SUCURSAL_CODIGO = a.ANUNCIO_SUCURSAL_CODIGO
JOIN SQLSQUAD.BI_Tiempo t on t.TIEMPO_ID = a.ANUNCIO_TIEMPO_ID
JOIN SQLSQUAD.BI_Rango_Etario r ON r.RANGO_ETARIO_ID = a.ANUNCIO_RANGO_ETARIO_ID
GROUP BY s.SUCURSAL_CODIGO, r.RANGO_ETARIO_ID, t.TIEMPO_AÑO